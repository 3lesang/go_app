// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: product.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products (
    name, slug, description, origin_price, sale_price, specs
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type CreateProductParams struct {
	Name        string         `json:"name"`
	Slug        pgtype.Text    `json:"slug"`
	Description []byte         `json:"description"`
	OriginPrice pgtype.Numeric `json:"origin_price"`
	SalePrice   pgtype.Numeric `json:"sale_price"`
	Specs       []byte         `json:"specs"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.Exec(ctx, createProduct,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.OriginPrice,
		arg.SalePrice,
		arg.Specs,
	)
	return err
}

const deleteProducts = `-- name: DeleteProducts :exec
DELETE FROM products
WHERE id IN ($1)
`

func (q *Queries) DeleteProducts(ctx context.Context, ids []int64) error {
	_, err := q.db.Exec(ctx, deleteProducts, ids)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name
FROM products
WHERE id = $1
LIMIT 1
`

type GetProductRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetProduct(ctx context.Context, id int64) (GetProductRow, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i GetProductRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, slug
FROM products
ORDER BY id
`

type ListProductsRow struct {
	ID   int64       `json:"id"`
	Name string      `json:"name"`
	Slug pgtype.Text `json:"slug"`
}

func (q *Queries) ListProducts(ctx context.Context) ([]ListProductsRow, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProductsRow
	for rows.Next() {
		var i ListProductsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Slug); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
    set name = $2,
    slug = $3
WHERE id = $1
`

type UpdateProductParams struct {
	ID   int64       `json:"id"`
	Name string      `json:"name"`
	Slug pgtype.Text `json:"slug"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct, arg.ID, arg.Name, arg.Slug)
	return err
}
