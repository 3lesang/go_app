// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package database

import (
	"context"
	"strings"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (name, phone, email, password, username) VALUES (?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	Name     string  `json:"name"`
	Phone    *string `json:"phone"`
	Email    *string `json:"email"`
	Password string  `json:"password"`
	Username *string `json:"username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.Password,
		arg.Username,
	)
	return err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) DeleteUsers(ctx context.Context, ids []int64) error {
	query := deleteUsers
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, phone, email, username FROM users WHERE id = ?
`

type GetUserRow struct {
	ID       int64   `json:"id"`
	Name     string  `json:"name"`
	Phone    *string `json:"phone"`
	Email    *string `json:"email"`
	Username *string `json:"username"`
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Username,
	)
	return i, err
}

const getUserByIdentify = `-- name: GetUserByIdentify :one
SELECT id, name, phone, email, username, password FROM users WHERE username = ? OR email = ? OR phone = ? LIMIT 1
`

type GetUserByIdentifyParams struct {
	Username *string `json:"username"`
	Email    *string `json:"email"`
	Phone    *string `json:"phone"`
}

type GetUserByIdentifyRow struct {
	ID       int64   `json:"id"`
	Name     string  `json:"name"`
	Phone    *string `json:"phone"`
	Email    *string `json:"email"`
	Username *string `json:"username"`
	Password string  `json:"password"`
}

func (q *Queries) GetUserByIdentify(ctx context.Context, arg GetUserByIdentifyParams) (GetUserByIdentifyRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByIdentify, arg.Username, arg.Email, arg.Phone)
	var i GetUserByIdentifyRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, phone, email, username FROM users ORDER BY id
`

type ListUsersRow struct {
	ID       int64   `json:"id"`
	Name     string  `json:"name"`
	Phone    *string `json:"phone"`
	Email    *string `json:"email"`
	Username *string `json:"username"`
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
