// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package auth_db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO
  users (name, phone, email, password, username)
VALUES
  ($1, $2, $3, $4, $5)
`

type CreateUserParams struct {
	Name     string      `json:"name"`
	Phone    pgtype.Text `json:"phone"`
	Email    pgtype.Text `json:"email"`
	Password string      `json:"password"`
	Username pgtype.Text `json:"username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.Password,
		arg.Username,
	)
	return err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users
WHERE
  id = ANY ($1::bigint[])
`

func (q *Queries) DeleteUsers(ctx context.Context, dollar_1 []int64) error {
	_, err := q.db.Exec(ctx, deleteUsers, dollar_1)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
  id,
  name,
  username
FROM
  users
WHERE
  id = $1
LIMIT
  1
`

type GetUserRow struct {
	ID       pgtype.UUID `json:"id"`
	Name     string      `json:"name"`
	Username pgtype.Text `json:"username"`
}

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Name, &i.Username)
	return i, err
}

const getUserByIdentify = `-- name: GetUserByIdentify :one
SELECT
  id,
  name,
  phone,
  email,
  username,
  password
FROM
  users
WHERE
  username = $1
  OR email = $2
  OR phone = $3
LIMIT
  1
`

type GetUserByIdentifyParams struct {
	Username pgtype.Text `json:"username"`
	Email    pgtype.Text `json:"email"`
	Phone    pgtype.Text `json:"phone"`
}

type GetUserByIdentifyRow struct {
	ID       pgtype.UUID `json:"id"`
	Name     string      `json:"name"`
	Phone    pgtype.Text `json:"phone"`
	Email    pgtype.Text `json:"email"`
	Username pgtype.Text `json:"username"`
	Password string      `json:"password"`
}

func (q *Queries) GetUserByIdentify(ctx context.Context, arg GetUserByIdentifyParams) (GetUserByIdentifyRow, error) {
	row := q.db.QueryRow(ctx, getUserByIdentify, arg.Username, arg.Email, arg.Phone)
	var i GetUserByIdentifyRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
  id,
  name,
  phone,
  email,
  username
FROM
  users
ORDER BY
  id
`

type ListUsersRow struct {
	ID       pgtype.UUID `json:"id"`
	Name     string      `json:"name"`
	Phone    pgtype.Text `json:"phone"`
	Email    pgtype.Text `json:"email"`
	Username pgtype.Text `json:"username"`
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
