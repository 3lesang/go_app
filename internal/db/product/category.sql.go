// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: category.sql

package product_db

import (
	"context"
)

const bulkDeleteCategories = `-- name: BulkDeleteCategories :exec
DELETE FROM categories
WHERE
  id = ANY ($1::bigint[])
`

func (q *Queries) BulkDeleteCategories(ctx context.Context, dollar_1 []int64) error {
	_, err := q.db.Exec(ctx, bulkDeleteCategories, dollar_1)
	return err
}

const createCategory = `-- name: CreateCategory :exec
INSERT INTO
  categories (name, slug)
VALUES
  ($1, $2)
`

type CreateCategoryParams struct {
	Name string `json:"name"`
	Slug string `json:"slug"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.db.Exec(ctx, createCategory, arg.Name, arg.Slug)
	return err
}

const getCategories = `-- name: GetCategories :many
SELECT
  id,
  name,
  slug
FROM
  categories
ORDER BY
  id
`

type GetCategoriesRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
	Slug string `json:"slug"`
}

func (q *Queries) GetCategories(ctx context.Context) ([]GetCategoriesRow, error) {
	rows, err := q.db.Query(ctx, getCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategoriesRow
	for rows.Next() {
		var i GetCategoriesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Slug); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT
  id,
  name,
  slug
FROM
  categories
WHERE
  id = $1
LIMIT
  1
`

type GetCategoryRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
	Slug string `json:"slug"`
}

func (q *Queries) GetCategory(ctx context.Context, id int64) (GetCategoryRow, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i GetCategoryRow
	err := row.Scan(&i.ID, &i.Name, &i.Slug)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE categories
SET
  name = $2,
  slug = $3
WHERE
  id = $1
`

type UpdateCategoryParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
	Slug string `json:"slug"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.Exec(ctx, updateCategory, arg.ID, arg.Name, arg.Slug)
	return err
}
