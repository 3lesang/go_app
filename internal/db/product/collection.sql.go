// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: collection.sql

package product_db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const bulkDeleteCollections = `-- name: BulkDeleteCollections :exec
DELETE FROM collections
WHERE
  id = ANY ($1::bigint[])
`

func (q *Queries) BulkDeleteCollections(ctx context.Context, dollar_1 []int64) error {
	_, err := q.db.Exec(ctx, bulkDeleteCollections, dollar_1)
	return err
}

const createCollection = `-- name: CreateCollection :exec
INSERT INTO
  collections (
    name,
    slug,
    meta_title,
    meta_description,
    image_url,
    layout
  )
VALUES
  ($1, $2, $3, $4, $5, $6)
`

type CreateCollectionParams struct {
	Name            string      `json:"name"`
	Slug            string      `json:"slug"`
	MetaTitle       pgtype.Text `json:"meta_title"`
	MetaDescription pgtype.Text `json:"meta_description"`
	ImageUrl        pgtype.Text `json:"image_url"`
	Layout          pgtype.Text `json:"layout"`
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) error {
	_, err := q.db.Exec(ctx, createCollection,
		arg.Name,
		arg.Slug,
		arg.MetaTitle,
		arg.MetaDescription,
		arg.ImageUrl,
		arg.Layout,
	)
	return err
}

const getCollection = `-- name: GetCollection :one
SELECT
  id,
  name,
  slug,
  image_url,
  meta_title,
  meta_description,
  layout
FROM
  collections
WHERE
  id = $1
LIMIT
  1
`

type GetCollectionRow struct {
	ID              int64       `json:"id"`
	Name            string      `json:"name"`
	Slug            string      `json:"slug"`
	ImageUrl        pgtype.Text `json:"image_url"`
	MetaTitle       pgtype.Text `json:"meta_title"`
	MetaDescription pgtype.Text `json:"meta_description"`
	Layout          pgtype.Text `json:"layout"`
}

func (q *Queries) GetCollection(ctx context.Context, id int64) (GetCollectionRow, error) {
	row := q.db.QueryRow(ctx, getCollection, id)
	var i GetCollectionRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.ImageUrl,
		&i.MetaTitle,
		&i.MetaDescription,
		&i.Layout,
	)
	return i, err
}

const getCollections = `-- name: GetCollections :many
SELECT
  id,
  name,
  slug
FROM
  collections
ORDER BY
  id
`

type GetCollectionsRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
	Slug string `json:"slug"`
}

func (q *Queries) GetCollections(ctx context.Context) ([]GetCollectionsRow, error) {
	rows, err := q.db.Query(ctx, getCollections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCollectionsRow
	for rows.Next() {
		var i GetCollectionsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Slug); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCollection = `-- name: UpdateCollection :exec
UPDATE collections
SET
  name = $2,
  slug = $3,
  meta_title = $4,
  meta_description = $5,
  image_url = $6,
  layout = $7
WHERE
  id = $1
`

type UpdateCollectionParams struct {
	ID              int64       `json:"id"`
	Name            string      `json:"name"`
	Slug            string      `json:"slug"`
	MetaTitle       pgtype.Text `json:"meta_title"`
	MetaDescription pgtype.Text `json:"meta_description"`
	ImageUrl        pgtype.Text `json:"image_url"`
	Layout          pgtype.Text `json:"layout"`
}

func (q *Queries) UpdateCollection(ctx context.Context, arg UpdateCollectionParams) error {
	_, err := q.db.Exec(ctx, updateCollection,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.MetaTitle,
		arg.MetaDescription,
		arg.ImageUrl,
		arg.Layout,
	)
	return err
}
