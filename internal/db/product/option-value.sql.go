// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: option-value.sql

package product_db

import (
	"context"
)

const bulkInsertOptionValues = `-- name: BulkInsertOptionValues :many
INSERT INTO
  option_values (name, no, option_id)
SELECT
  unnest($1::text[]),
  unnest($2::int[]),
  unnest($3::bigint[])
RETURNING
  id,
  name,
  option_id
`

type BulkInsertOptionValuesParams struct {
	Names     []string `json:"names"`
	Nos       []int32  `json:"nos"`
	OptionIds []int64  `json:"option_ids"`
}

type BulkInsertOptionValuesRow struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	OptionID int64  `json:"option_id"`
}

func (q *Queries) BulkInsertOptionValues(ctx context.Context, arg BulkInsertOptionValuesParams) ([]BulkInsertOptionValuesRow, error) {
	rows, err := q.db.Query(ctx, bulkInsertOptionValues, arg.Names, arg.Nos, arg.OptionIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BulkInsertOptionValuesRow
	for rows.Next() {
		var i BulkInsertOptionValuesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.OptionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const bulkUpdateOptionValues = `-- name: BulkUpdateOptionValues :exec
UPDATE option_values AS ov
SET
  name = data.name
FROM (
  SELECT  UNNEST($1::bigint[]) AS id,
          UNNEST($2::text[]) AS name
) AS data
WHERE ov.id = data.id
  AND (
    ov.name IS DISTINCT FROM data.name
  )
`

type BulkUpdateOptionValuesParams struct {
	Ids   []int64  `json:"ids"`
	Names []string `json:"names"`
}

func (q *Queries) BulkUpdateOptionValues(ctx context.Context, arg BulkUpdateOptionValuesParams) error {
	_, err := q.db.Exec(ctx, bulkUpdateOptionValues, arg.Ids, arg.Names)
	return err
}

const deleteOptionValuesNotInIDs = `-- name: DeleteOptionValuesNotInIDs :exec
DELETE FROM option_values
WHERE option_id IN (SELECT UNNEST($1::bigint[])) 
  AND id NOT IN (SELECT UNNEST($2::bigint[]))
`

type DeleteOptionValuesNotInIDsParams struct {
	OptionIds []int64 `json:"option_ids"`
	ValueIds  []int64 `json:"value_ids"`
}

func (q *Queries) DeleteOptionValuesNotInIDs(ctx context.Context, arg DeleteOptionValuesNotInIDsParams) error {
	_, err := q.db.Exec(ctx, deleteOptionValuesNotInIDs, arg.OptionIds, arg.ValueIds)
	return err
}

const getOptionValuesByOptionIDs = `-- name: GetOptionValuesByOptionIDs :many
SELECT
  id,
  name,
  no,
  option_id
FROM
  option_values
WHERE
  option_id = ANY ($1::bigint[])
`

// Get all option values for a list of options
func (q *Queries) GetOptionValuesByOptionIDs(ctx context.Context, dollar_1 []int64) ([]OptionValue, error) {
	rows, err := q.db.Query(ctx, getOptionValuesByOptionIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OptionValue
	for rows.Next() {
		var i OptionValue
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.No,
			&i.OptionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
