// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: option.sql

package product_db

import (
	"context"
)

const bulkInsertOptions = `-- name: BulkInsertOptions :many
INSERT INTO
  options (name, no, product_id)
SELECT
  unnest($1::text[]),
  unnest($2::int[]),
  unnest($3::bigint[]) RETURNING id,
  name
`

type BulkInsertOptionsParams struct {
	Names      []string `json:"names"`
	Nos        []int32  `json:"nos"`
	ProductIds []int64  `json:"product_ids"`
}

type BulkInsertOptionsRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) BulkInsertOptions(ctx context.Context, arg BulkInsertOptionsParams) ([]BulkInsertOptionsRow, error) {
	rows, err := q.db.Query(ctx, bulkInsertOptions, arg.Names, arg.Nos, arg.ProductIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BulkInsertOptionsRow
	for rows.Next() {
		var i BulkInsertOptionsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const bulkUpdateOptions = `-- name: BulkUpdateOptions :exec
UPDATE options AS o
SET
  name = data.name
FROM (
  SELECT  UNNEST($1::bigint[]) AS id,
          UNNEST($2::text[]) AS name
) AS data
WHERE o.id = data.id
  AND (
    o.name IS DISTINCT FROM data.name
  )
`

type BulkUpdateOptionsParams struct {
	Ids   []int64  `json:"ids"`
	Names []string `json:"names"`
}

func (q *Queries) BulkUpdateOptions(ctx context.Context, arg BulkUpdateOptionsParams) error {
	_, err := q.db.Exec(ctx, bulkUpdateOptions, arg.Ids, arg.Names)
	return err
}

const deleteOptionsByProductID = `-- name: DeleteOptionsByProductID :exec
DELETE FROM
  options
WHERE
  product_id = $1
`

func (q *Queries) DeleteOptionsByProductID(ctx context.Context, productID int64) error {
	_, err := q.db.Exec(ctx, deleteOptionsByProductID, productID)
	return err
}

const deleteOptionsNotInIDs = `-- name: DeleteOptionsNotInIDs :exec
DELETE FROM options
WHERE product_id = $1
  AND id NOT IN (SELECT UNNEST($2::bigint[]))
`

type DeleteOptionsNotInIDsParams struct {
	ProductID int64   `json:"product_id"`
	Ids       []int64 `json:"ids"`
}

func (q *Queries) DeleteOptionsNotInIDs(ctx context.Context, arg DeleteOptionsNotInIDsParams) error {
	_, err := q.db.Exec(ctx, deleteOptionsNotInIDs, arg.ProductID, arg.Ids)
	return err
}

const getOptionsByProductID = `-- name: GetOptionsByProductID :many
SELECT
  id,
  name,
  no
FROM
  options
WHERE
  product_id = $1
`

type GetOptionsByProductIDRow struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
	No   int32  `json:"no"`
}

func (q *Queries) GetOptionsByProductID(ctx context.Context, productID int64) ([]GetOptionsByProductIDRow, error) {
	rows, err := q.db.Query(ctx, getOptionsByProductID, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOptionsByProductIDRow
	for rows.Next() {
		var i GetOptionsByProductIDRow
		if err := rows.Scan(&i.ID, &i.Name, &i.No); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
