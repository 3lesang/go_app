// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: product-file.sql

package product_db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const bulkInsertProductFiles = `-- name: BulkInsertProductFiles :exec
INSERT INTO
  product_files (name, is_primary, no, product_id)
SELECT
  unnest($1::text[]),
  unnest($2::bool[]),
  unnest($3::int[]),
  unnest($4::bigint[])
`

type BulkInsertProductFilesParams struct {
	Names       []string `json:"names"`
	IsPrimaries []bool   `json:"is_primaries"`
	Nos         []int32  `json:"nos"`
	ProductIds  []int64  `json:"product_ids"`
}

func (q *Queries) BulkInsertProductFiles(ctx context.Context, arg BulkInsertProductFilesParams) error {
	_, err := q.db.Exec(ctx, bulkInsertProductFiles,
		arg.Names,
		arg.IsPrimaries,
		arg.Nos,
		arg.ProductIds,
	)
	return err
}

const deleteProductFiles = `-- name: DeleteProductFiles :exec
DELETE FROM product_files WHERE product_id = $1
`

func (q *Queries) DeleteProductFiles(ctx context.Context, productID int64) error {
	_, err := q.db.Exec(ctx, deleteProductFiles, productID)
	return err
}

const getFilesByProductID = `-- name: GetFilesByProductID :many
SELECT
  name
FROM
  product_files
WHERE
  product_id = $1
`

func (q *Queries) GetFilesByProductID(ctx context.Context, productID int64) ([]pgtype.Text, error) {
	rows, err := q.db.Query(ctx, getFilesByProductID, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.Text
	for rows.Next() {
		var name pgtype.Text
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
