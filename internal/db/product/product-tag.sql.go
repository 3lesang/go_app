// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: product-tag.sql

package product_db

import (
	"context"
)

const bulkInsertProductTags = `-- name: BulkInsertProductTags :exec
INSERT INTO
  product_tags (name, product_id)
SELECT
  unnest($1::text[]),
  unnest($2::bigint[])
`

type BulkInsertProductTagsParams struct {
	Names      []string `json:"names"`
	ProductIds []int64  `json:"product_ids"`
}

func (q *Queries) BulkInsertProductTags(ctx context.Context, arg BulkInsertProductTagsParams) error {
	_, err := q.db.Exec(ctx, bulkInsertProductTags, arg.Names, arg.ProductIds)
	return err
}

const deleteProductTags = `-- name: DeleteProductTags :exec
DELETE FROM product_tags WHERE product_id = $1
`

func (q *Queries) DeleteProductTags(ctx context.Context, productID int64) error {
	_, err := q.db.Exec(ctx, deleteProductTags, productID)
	return err
}

const getTagsByProductID = `-- name: GetTagsByProductID :many
SELECT
  name
FROM
  product_tags
WHERE
  product_id = $1
`

func (q *Queries) GetTagsByProductID(ctx context.Context, productID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getTagsByProductID, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
