// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: variant-option.sql

package product_db

import (
	"context"
)

const bulkInsertVariantOption = `-- name: BulkInsertVariantOption :exec
INSERT INTO
  variant_options (variant_id, option_id, option_value_id)
SELECT
  unnest($1::bigint[]),
  unnest($2::bigint[]),
  unnest($3::bigint[])
`

type BulkInsertVariantOptionParams struct {
	VariantIds     []int64 `json:"variant_ids"`
	OptionIds      []int64 `json:"option_ids"`
	OptionValueIds []int64 `json:"option_value_ids"`
}

func (q *Queries) BulkInsertVariantOption(ctx context.Context, arg BulkInsertVariantOptionParams) error {
	_, err := q.db.Exec(ctx, bulkInsertVariantOption, arg.VariantIds, arg.OptionIds, arg.OptionValueIds)
	return err
}

const deleteVariantOptionsNotInIDs = `-- name: DeleteVariantOptionsNotInIDs :exec
DELETE FROM variant_options
WHERE variant_id IN (SELECT UNNEST($1::bigint[])) 
  AND option_value_id NOT IN (SELECT UNNEST($2::bigint[]))
`

type DeleteVariantOptionsNotInIDsParams struct {
	VariantIds     []int64 `json:"variant_ids"`
	OptionValueIds []int64 `json:"option_value_ids"`
}

func (q *Queries) DeleteVariantOptionsNotInIDs(ctx context.Context, arg DeleteVariantOptionsNotInIDsParams) error {
	_, err := q.db.Exec(ctx, deleteVariantOptionsNotInIDs, arg.VariantIds, arg.OptionValueIds)
	return err
}

const getVariantOptionsByVariantIDs = `-- name: GetVariantOptionsByVariantIDs :many
SELECT
  vo.variant_id,
  o.id AS option_id,
  o.name AS option_name,
  ov.id AS value_id,
  ov.name AS value_name
FROM
  variant_options vo
  JOIN options o ON o.id = vo.option_id
  JOIN option_values ov ON ov.id = vo.option_value_id
WHERE
  vo.variant_id = ANY ($1::bigint[])
ORDER BY
  vo.variant_id,
  o.no
`

type GetVariantOptionsByVariantIDsRow struct {
	VariantID  int64  `json:"variant_id"`
	OptionID   int64  `json:"option_id"`
	OptionName string `json:"option_name"`
	ValueID    int64  `json:"value_id"`
	ValueName  string `json:"value_name"`
}

func (q *Queries) GetVariantOptionsByVariantIDs(ctx context.Context, dollar_1 []int64) ([]GetVariantOptionsByVariantIDsRow, error) {
	rows, err := q.db.Query(ctx, getVariantOptionsByVariantIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVariantOptionsByVariantIDsRow
	for rows.Next() {
		var i GetVariantOptionsByVariantIDsRow
		if err := rows.Scan(
			&i.VariantID,
			&i.OptionID,
			&i.OptionName,
			&i.ValueID,
			&i.ValueName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
