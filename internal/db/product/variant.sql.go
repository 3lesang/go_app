// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: variant.sql

package product_db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const bulkInsertVariants = `-- name: BulkInsertVariants :many
INSERT INTO
  variants (
    origin_price,
    sale_price,
    file,
    stock,
    sku,
    no,
    product_id
  )
SELECT
  unnest($1::int[]),
  unnest($2::int[]),
  unnest($3::text[]),
  unnest($4::int[]),
  unnest($5::text[]),
  unnest($6::int[]),
  unnest($7::bigint[])
RETURNING
  id
`

type BulkInsertVariantsParams struct {
	OriginPrices []int32  `json:"origin_prices"`
	SalePrices   []int32  `json:"sale_prices"`
	Files        []string `json:"files"`
	Stocks       []int32  `json:"stocks"`
	Skus         []string `json:"skus"`
	Nos          []int32  `json:"nos"`
	ProductIds   []int64  `json:"product_ids"`
}

func (q *Queries) BulkInsertVariants(ctx context.Context, arg BulkInsertVariantsParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, bulkInsertVariants,
		arg.OriginPrices,
		arg.SalePrices,
		arg.Files,
		arg.Stocks,
		arg.Skus,
		arg.Nos,
		arg.ProductIds,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const bulkUpdateVariants = `-- name: BulkUpdateVariants :exec
UPDATE variants AS v
SET
  origin_price = data.origin_price,
  sale_price   = data.sale_price,
  file         = data.file,
  stock        = data.stock,
  sku          = data.sku
FROM (
  SELECT
    UNNEST($1::bigint[])       AS id,
    UNNEST($2::int[]) AS origin_price,
    UNNEST($3::int[])   AS sale_price,
    UNNEST($4::text[])        AS file,
    UNNEST($5::int[])        AS stock,
    UNNEST($6::text[])         AS sku
) AS data
WHERE v.id = data.id
  AND (
    v.origin_price IS DISTINCT FROM data.origin_price OR
    v.sale_price   IS DISTINCT FROM data.sale_price OR
    v.file         IS DISTINCT FROM data.file OR
    v.stock        IS DISTINCT FROM data.stock OR
    v.sku          IS DISTINCT FROM data.sku
  )
`

type BulkUpdateVariantsParams struct {
	Ids          []int64  `json:"ids"`
	OriginPrices []int32  `json:"origin_prices"`
	SalePrices   []int32  `json:"sale_prices"`
	Files        []string `json:"files"`
	Stocks       []int32  `json:"stocks"`
	Skus         []string `json:"skus"`
}

func (q *Queries) BulkUpdateVariants(ctx context.Context, arg BulkUpdateVariantsParams) error {
	_, err := q.db.Exec(ctx, bulkUpdateVariants,
		arg.Ids,
		arg.OriginPrices,
		arg.SalePrices,
		arg.Files,
		arg.Stocks,
		arg.Skus,
	)
	return err
}

const createVariant = `-- name: CreateVariant :exec
INSERT INTO
  variants (
    origin_price,
    sale_price,
    file,
    stock,
    sku,
    no,
    product_id
  )
VALUES
  ($1, $2, $3, $4, $5, $6, $7)
`

type CreateVariantParams struct {
	OriginPrice int32       `json:"origin_price"`
	SalePrice   int32       `json:"sale_price"`
	File        pgtype.Text `json:"file"`
	Stock       int32       `json:"stock"`
	Sku         string      `json:"sku"`
	No          int32       `json:"no"`
	ProductID   int64       `json:"product_id"`
}

func (q *Queries) CreateVariant(ctx context.Context, arg CreateVariantParams) error {
	_, err := q.db.Exec(ctx, createVariant,
		arg.OriginPrice,
		arg.SalePrice,
		arg.File,
		arg.Stock,
		arg.Sku,
		arg.No,
		arg.ProductID,
	)
	return err
}

const deleteVariantsByProductID = `-- name: DeleteVariantsByProductID :exec
DELETE FROM variants
WHERE
  product_id = $1
`

func (q *Queries) DeleteVariantsByProductID(ctx context.Context, productID int64) error {
	_, err := q.db.Exec(ctx, deleteVariantsByProductID, productID)
	return err
}

const deleteVariantsNotInIDsByProductID = `-- name: DeleteVariantsNotInIDsByProductID :exec
DELETE FROM variants
WHERE product_id = $1
  AND id NOT IN (SELECT UNNEST($2::bigint[]))
`

type DeleteVariantsNotInIDsByProductIDParams struct {
	ProductID int64   `json:"product_id"`
	Ids       []int64 `json:"ids"`
}

func (q *Queries) DeleteVariantsNotInIDsByProductID(ctx context.Context, arg DeleteVariantsNotInIDsByProductIDParams) error {
	_, err := q.db.Exec(ctx, deleteVariantsNotInIDsByProductID, arg.ProductID, arg.Ids)
	return err
}

const getVariantsByProductID = `-- name: GetVariantsByProductID :many
SELECT
  id,
  origin_price,
  sale_price,
  file,
  stock,
  sku
FROM
  variants
WHERE
  product_id = $1
ORDER BY no ASC
`

type GetVariantsByProductIDRow struct {
	ID          int64       `json:"id"`
	OriginPrice int32       `json:"origin_price"`
	SalePrice   int32       `json:"sale_price"`
	File        pgtype.Text `json:"file"`
	Stock       int32       `json:"stock"`
	Sku         string      `json:"sku"`
}

func (q *Queries) GetVariantsByProductID(ctx context.Context, productID int64) ([]GetVariantsByProductIDRow, error) {
	rows, err := q.db.Query(ctx, getVariantsByProductID, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVariantsByProductIDRow
	for rows.Next() {
		var i GetVariantsByProductIDRow
		if err := rows.Scan(
			&i.ID,
			&i.OriginPrice,
			&i.SalePrice,
			&i.File,
			&i.Stock,
			&i.Sku,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVariant = `-- name: UpdateVariant :exec
UPDATE variants
SET
  origin_price = $2,
  sale_price = $3,
  file = $4,
  stock = $5,
  sku = $6,
  product_id = $7
WHERE
  id = $1
`

type UpdateVariantParams struct {
	ID          int64       `json:"id"`
	OriginPrice int32       `json:"origin_price"`
	SalePrice   int32       `json:"sale_price"`
	File        pgtype.Text `json:"file"`
	Stock       int32       `json:"stock"`
	Sku         string      `json:"sku"`
	ProductID   int64       `json:"product_id"`
}

func (q *Queries) UpdateVariant(ctx context.Context, arg UpdateVariantParams) error {
	_, err := q.db.Exec(ctx, updateVariant,
		arg.ID,
		arg.OriginPrice,
		arg.SalePrice,
		arg.File,
		arg.Stock,
		arg.Sku,
		arg.ProductID,
	)
	return err
}
